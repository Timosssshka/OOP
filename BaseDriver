class BaseDriver:
    def __init__(self, last_name: str, first_name: str, patronymic: str, license_number: str):
        """
        Базовый класс для водителя с общими атрибутами и методами.
        """
        if not self._validate_license_number(license_number):
            raise ValueError("Неверный формат водительского удостоверения.")

        self._last_name = last_name
        self._first_name = first_name
        self._patronymic = patronymic
        self._license_number = license_number

    @property
    def last_name(self):
        return self._last_name

    @property
    def first_name(self):
        return self._first_name

    @property
    def patronymic(self):
        return self._patronymic

    @property
    def license_number(self):
        return self._license_number

@staticmethod
    def _validate_license_number(license_number: str) -> bool:
        """
        Проверяет формат водительского удостоверения: ** ** ****
        """
        return bool(re.fullmatch(r"\d{2} \d{2} \d{4}", license_number))

def short_description(self):
        return f"{self.last_name} {self.first_name[0]}. {self.patronymic[0]}."

def __str__(self):
        return (f"Фамилия: {self.last_name}\n"
                f"Имя: {self.first_name}\n"
                f"Отчество: {self.patronymic}\n"
                f"Номер ВУ: {self.license_number}")

class Driver(BaseDriver):
    def __init__(self, driver_id: None, last_name: str, first_name: str, patronymic: str, experience: int,
                 license_number: str):
        """
        Инициализирует объект Driver с заданными параметрами после их валидации.
        """
        if not self._validate_driver_id(driver_id):
            raise ValueError("Неверный ID водителя.")
        if not self._validate_experience(experience):
            raise ValueError("Неверный стаж водителя.")

        super().__init__(last_name, first_name, patronymic, license_number)

        self._driver_id = driver_id
        self._experience = experience

    @property
    def driver_id(self):
        return self._driver_id

    @property
    def experience(self):
        return self._experience

    @staticmethod
    def _validate_driver_id(driver_id: int) -> bool:
        """
        Проверяет, является ли ID водителя положительным целым числом.
        """
        return isinstance(driver_id, int) and driver_id > 0

    @staticmethod
    def _validate_experience(experience: int) -> bool:
        """
        Проверяет стаж: он должен быть положительным числом, не превышающим 100.
        """
        return isinstance(experience, int) and 0 <= experience <= 100

    def __str__(self):
        return (f"Полная информация о водителе:\n"
                f"ID: {self.driver_id}\n"
                f"{super().__str__()}\n"
                f"Стаж: {self.experience} лет")


class DriverShort(BaseDriver):
    def __init__(self, driver: Driver):
        """
        Инициализирует объект DriverShort на основе объекта Driver.
        """
        super().__init__(driver.last_name, driver.first_name, driver.patronymic, driver.license_number)
        self.inn = None
        self.ogrn = None

    def __str__(self):
        return (f"Краткая информация о водителе:\n"
                f"Фамилия: {self.last_name}\n"
                f"Инициалы: {self.initials}\n"
                f"Номер ВУ: {self.license_number}\n"
                f"ИНН: {self.inn}\n"
                f"ОГРН: {self.ogrn}")

    @property
    def initials(self):
        return f"{self.first_name[0]}. {self.patronymic[0]}."

    def set_inn(self, inn: str):
        self.inn = inn

    def set_ogrn(self, ogrn: str):
        self.ogrn = ogrn

# Пример использования
if __name__ == "__main__":
    # Попробуем создать водителя с разными данными
    valid_driver_id = 1
    valid_last_name = "Иванов"
    valid_first_name = "Иван"
    valid_patronymic = "Иванович"
    valid_experience = 5
    valid_license_number = "12 34 5678"

    if Driver._validate_driver_id(valid_driver_id) and \
            Driver._validate_experience(valid_experience) and \
            BaseDriver._validate_license_number(valid_license_number):
        driver = Driver(valid_driver_id, valid_last_name, valid_first_name, valid_patronymic, valid_experience,
                        valid_license_number)
        print(driver)
    else:
        print("Некорректные данные для водителя.")


